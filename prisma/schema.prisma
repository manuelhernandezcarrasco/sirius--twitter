// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  profilePicture String? @db.Uuid
  username       String  @unique // Unique constraint
  name           String? @db.VarChar(35) // Limit display name to 35 characters
  email          String  @unique // Unique constraint
  password       String
  private        Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  reactions Reaction[]
  posts     Post[]
  follows   Follow[]   @relation(name: "follows")
  followers Follow[]   @relation(name: "followers")
  chatsStarted Chat[] @relation(name: "chatsStarted")
  chatsReceived Chat[] @relation(name: "chatsReceived")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followedId, followerId])
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  fatherPostId String?    @db.Uuid
  fatherPost   Post?      @relation(fields: [fatherPostId], references: [id], name: "comment", onDelete: Cascade)
  authorId     String     @db.Uuid // Foreign Key
  content      String     @db.VarChar(240) // Limit the content to 240 characters
  images       String[]
  reactions    Reaction[]
  comments     Post[]     @relation(name: "comment")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  postId    String    @db.Uuid
  reactorId String    @db.Uuid
  type      Reactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactor User @relation(fields: [reactorId], references: [id], onDelete: Cascade)
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, reactorId, type])
}

model Chat {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user1Id String @db.Uuid
  user2Id String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1 User @relation(name: "chatsStarted",fields: [user1Id], references: [id])
  user2 User @relation(name: "chatsReceived", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createAt DateTime @default(now())
  senderId String
  message String
  chatId String @db.Uuid

  chat Chat @relation(fields: [chatId], references: [id])
}

enum Reactions {
  LIKE
  RETWEET
}
